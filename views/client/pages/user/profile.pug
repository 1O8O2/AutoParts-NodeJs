include ../../mixins/alert.pug
doctype html

html
  head
    meta(charset='UTF-8')
    title Thông tin tài khoản
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css', integrity='sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==', crossorigin='anonymous', referrerpolicy='no-referrer')
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC', crossorigin='anonymous')
    link(href='/css/profile.css', rel='stylesheet')
  body
    +alert-error(3000)
    +alert-success(3000)
    #alertContainer
    .sidebar
      form(method='POST', action='/AutoParts/account/edit')
        img#user_icon(src='https://i.pinimg.com/474x/89/90/48/899048ab0cc455154006fdb9676964b3.jpg', width='100px', height='100px', alt='')
            
        p
          input(type='hidden', name='cartId', value=customer.cartId, required)
        p.input-field
          label Email
          input(type='email', name='email', value=customer.email, readonly, required)
          span.error-message
        p.input-field
          label Họ và tên
          input(type='text', name='fullName', value=customer.fullName, disabled, required)
          span.error-message
        p.input-field
          label Số điện thoại
          input(type='tel', name='phone', value=customer.phone, disabled, required)
          span.error-message
        p.input-field
          label Địa chỉ
          input(type='text', name='address', value=customer.address, disabled, required)
          span.error-message
        p
          if customer.status === 'Active'
            label(style='color: green;') Đang hoạt động
          else if customer.status === 'Inactive'
            label Ngưng hoạt động
          input(type='hidden', name='status', value=customer.status, required)
        .buttons
          button.button.edit-btn#edit-btn(type='submit') Chỉnh sửa
      .menu
        a.order.choosed
          i.fa-solid.fa-box-open
          |  Thông tin đơn hàng
        a.setting
          i.fa-solid.fa-lock
          |  Đổi mật khẩu
        a(href='/AutoParts')
          i.fa-solid.fa-house
          |  Trang chủ
        a.delete-btn(href='/AutoParts/account/logout')
          i.fa-solid.fa-right-from-bracket
          |  Đăng xuất
    .content
      .orders
        header.header
          h1 Lịch sử đơn hàng
        each order in orders
          .order-item(data-order=order)
            p
              strong Mã đơn hàng: 
              | #{order.orderId}
            p
              strong Ngày: 
              | #{order.orderDate}
            p
              strong Tổng tiền: 
              | #{order.totalCost}
            p
              strong Trạng thái: 
              | #{order.status}
            a.button.nav-btn(href=`/AutoParts/order/detail?orderId=${order.orderId}`) Xem chi tiết đơn hàng
      form.change-password.hide(action='/AutoParts/account/changePass', method='post')
        h3 Đổi mật khẩu
        .form-item
          input(type='password', name='pass', placeholder='Mật khẩu hiện tại', required, autocomplete='current-password')
          i.fa-solid.fa-eye
          i.fa-solid.fa-eye-slash
          span.error-message
        .form-item
          input(type='password', name='newpass', placeholder='Mật khẩu mới', required, autocomplete='new-password')
          i.fa-solid.fa-eye
          i.fa-solid.fa-eye-slash
          span.error-message
        .form-item
          input(type='password', name='confirmpass', placeholder='Xác nhận mật khẩu mới', required, autocomplete='new-password')
          i.fa-solid.fa-eye
          i.fa-solid.fa-eye-slash
          span.error-message
        button(type='submit') Cập nhật
    script.
      const formPass = document.querySelector('.change-password');
      const formEdit = document.querySelector('.sidebar form');
      const editBtn = document.querySelector('#edit-btn');
      window.messages = !{JSON.stringify(messagelist || {})};

      formPass.addEventListener('submit', function(e) {
        e.preventDefault();
        if (validateForm(this)) {
          this.submit();
        }
      });

          // Select DOM elements
      let textInputs = document.querySelectorAll(".input-field input[disabled]");
      textInputs.forEach(input => {
          input.addEventListener('blur', function() {
              const errorElement = this.parentElement.querySelector('.error-message');
              validateInput(this, errorElement);
            });
      });
      let passInputs = document.querySelectorAll(".form-item input[type='password']");
      passInputs.forEach(input => {
          input.addEventListener('blur', function() {
              const errorElement = this.parentElement.querySelector('.error-message');
              validateInput(this, errorElement);
            });
      });
      console.log(passInputs, textInputs);
      // Edit button toggle and form submission
      if (editBtn) {
        editBtn.onclick = function(event) {
          event.preventDefault();
            if (editBtn.innerHTML != "Lưu") {
                // Enable text inputs and phone for editing, except email and status
                textInputs.forEach(input => {
                    input.disabled = false;
                });
                // Email remains readonly
                editBtn.innerHTML = "Lưu"; // Change button text to "Save"
            }
            else{
              if (validateForm(formEdit)) {
                formEdit.submit();
              }
            }
        };
      }
      function showAlertClientSide(message, type = 'success', duration = 3000) {
        const existingAlerts = document.querySelectorAll('.message.info');
        existingAlerts.forEach(alert => alert.remove());
        // Determine alert class based on type
        const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';

        // Create alert HTML
        const alertHtml = `
            <div class="message info">
                <div class="alert ${alertClass}" data-time="${duration}" show-alert role="alert">
                    ${message} <span close-alert>X</span>
                </div>
            </div>
        `;

        // Append to a container (e.g., at the top of the form)
        const container = document.getElementById('alertContainer') || document.querySelector('.container-fluid');
        container.insertAdjacentHTML('afterbegin', alertHtml);

        // Handle auto-dismissal (if you have existing logic for this)
        const alertElement = container.querySelector('.alert[show-alert]');
        if (duration > 0) {
            setTimeout(() => {
                alertElement.parentElement.remove();
            }, duration);
        }

        // Add click handler for manual close
        const closeButton = alertElement.querySelector('[close-alert]');
        closeButton.addEventListener('click', () => {
            alertElement.parentElement.remove();
        });
      }
      // Input validation functions
        const validateInput = (input, errorElement) => {
          let isValid = true;
          let errorMessage = '';
          
          input.parentElement.classList.remove('error');
          
          // Validation rules based on input type
          if (input.value.trim() === '') {
            isValid = false;
            if (input.name === 'fullName') {
              errorMessage = window.messages.BLANK_NAME;
            } else if (input.name === 'email') {
              errorMessage = window.messages.BLANK_EMAIL;
            } else if (input.name === 'phone') {
              errorMessage = window.messages.BLANK_PHONE;
            } else if (input.name === 'address') {
              errorMessage = window.messages.BLANK_ADDRESS;
            } else {
              errorMessage = window.messages.BLANK_PASSWORD;
            }
          } else if (input.type === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(input.value)) {
              isValid = false;
              errorMessage = window.messages.INVALID_EMAIL_WARNING;
            }
          } else if (input.type === 'tel') {
            const phoneRegex = /^0\d{9}$/;
            if (!phoneRegex.test(input.value)) {
              isValid = false;
              errorMessage = window.messages.INVALID_PHONE_WARNING;
            }
          } else if (input.name === 'fullName' && input.value.trim().length < 6) {
            isValid = false;
            errorMessage = window.messages.INVALID_NAME_WARNING;
          } else if (input.name === 'address' && input.value.trim().length < 6) {
            isValid = false;
            errorMessage = window.messages.INVALID_ADDRESS_WARNING;
          } else if (input.name === 'pass') {
            const passwordRegex = /^[a-zA-Z0-9]{4,}$/;
            if (!passwordRegex.test(input.value)) {
              isValid = false;
              errorMessage = window.messages.INVALID_PASSWORD_ERROR;
            }
          } else if (input.name === 'newpass') {
            const passwordRegex = /^[a-zA-Z0-9]{4,}$/;
            if (!passwordRegex.test(input.value)) {
              isValid = false;
              errorMessage = window.messages.INVALID_PASSWORD_ERROR;
            }
          } else if (input.name === 'confirmpass') {
            const newPassword = document.querySelector('input[name="newpass"]').value;
            const passwordRegex = /^[a-zA-Z0-9]{4,}$/;
            if (!passwordRegex.test(input.value)) {
              isValid = false;
              errorMessage = window.messages.INVALID_PASSWORD_ERROR;
            }
            if (input.value !== newPassword) {
              isValid = false;
              errorMessage = window.messages.NOT_MATCH_PASSWORD_WARNING;
            }
          }
          
          if (!isValid) {
            input.parentElement.classList.add('error');
            if (errorElement) {
              errorElement.textContent = errorMessage;
              errorElement.style.visibility = 'visible';
              showAlertClientSide(errorMessage, 'danger');
              
              setTimeout(() => {
                errorElement.style.visibility = 'hidden';
                input.parentElement.classList.remove('error');
              }, 3000);
            }
          } else if (errorElement) {
            errorElement.textContent = '';
            errorElement.style.visibility = 'hidden';
          }
          
          return isValid;
        };
        
        // Validate form
        const validateForm = (form) => {
          const inputs = form.querySelectorAll('input:not([readonly]):not([type="hidden"])');
          let isValid = true;
          
          inputs.forEach(input => {
            const errorElement = input.parentElement.querySelector('.error-message');
            if (!validateInput(input, errorElement)) {
              isValid = false;
            }
          });
          
          return isValid;
        };
    script(src='/js/profile.js')