include ../../mixins/alert.pug
include ../../mixins/currency.pug

doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title Sửa đơn hàng
    link(rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css")
    link(rel="preconnect" href="https://fonts.googleapis.com")
    link(rel="preconnect" href="https://fonts.gstatic.com" crossorigin)
    link(href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet")
    link(rel="stylesheet" href="/css/cart.css")
    link(rel="stylesheet" href="/css/base.css")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js")
    script(src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js")
    style.
      .cart-list .row.border-bottom {
        margin: 0 0 1.5rem 0;
        padding: 1.5rem;
        transition: all 0.3s ease;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }

      .cart-list .row.border-bottom:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      }

      .product-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
        line-height: 1.4;
      }

      .btn-outline-primary {
        color: #FF6F61;
        border-color: #FF6F61;
      }

      .btn-outline-primary:hover {
        background-color: #FF6F61;
        border-color: #FF6F61;
        color: white;
      }

      .btn-outline-danger {
        color: #dc3545;
        border-color: #dc3545;
      }

      .btn-outline-danger:hover {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
      }

      .input-updateQTY {
        width: 50px;
        text-align: center;
        margin: 0 5px;
      }

      .updateQTY label {
        font-weight: 500;
        color: #666;
      }
  body
    +alert-error(3000)
    +alert-success(3000)

    .card
      .row
        .col-md-8.cart
          .title
            .row
              img.cart_logo-img(src="https://down-bs-vn.img.susercontent.com/vn-11134216-7ras8-m2ko7nkbfksm02_tn.webp" alt="home")
              .col.cart_title
                h4
                  b Sửa đơn hàng ##{order.orderId}
              .col.align-self-center.text-right.text-muted
                i.fas.fa-shopping-cart.me-2
                span #{products.length} món

          .cart-list
            each item in products
              .row.border-bottom.py-4
                .row.main.align-items-center
                  .col-3
                    img.img-fluid.rounded(src=item.product.imageUrls.split(',')[0] style="width: 100%; height: auto; object-fit: cover;")
                  .col-5
                    .row.text-muted.mb-2
                      strong Mã SP: 
                      span #{item.product.productId}
                    .row.mb-2
                      h5.product-name #{item.product.productName}
                    .row.mb-2
                      strong.text-danger
                        +formatCurrency(item.product.salePrice)
                    input.price(type="hidden" value=item.product.salePrice)
                  .col-2.updateQTY
                    .d-flex.flex-column.align-items-center
                      label.mb-2 Số lượng
                      .d-flex.align-items-center
                        button.btn-updateQTY(onclick="updateQuantity(this.nextElementSibling, -1)")
                          i.fas.fa-minus
                        input.input-updateQTY.quantity.text-center(
                          type="number" 
                          data-product-id=item.product.productId 
                          value=item.amount 
                          min="1" 
                          max=item.product.stock
                        )
                        button.btn-updateQTY(onclick="updateQuantity(this.previousElementSibling, 1)")
                          i.fas.fa-plus
                  .col-2
                    .d-flex.flex-column.align-items-end.gap-2
                      a.btn.btn-sm.btn-outline-primary.w-100.mb-2(href=`/AutoParts/product/detail?productId=${item.product.productId}`)
                        i.fas.fa-eye.me-2
                        | Chi tiết
                      form.w-100(action="/AutoParts/order/edit/remove-product" method="post")
                        input(type="hidden" name="orderId" value=order.orderId)
                        input(type="hidden" name="productId" value=item.product.productId)
                        button.btn.btn-sm.btn-outline-danger.w-100(
                          type="submit" 
                          onclick=`return confirm('Bạn có chắc muốn xóa sản phẩm ${item.product.productName} khỏi đơn hàng?')`
                        )
                          i.fas.fa-trash.me-2
                          | Xóa

          .cart-actions.d-flex.justify-content-between.align-items-center.mt-4
            a.btn.back-btn(href="/AutoParts/account/profile")
              i.fas.fa-arrow-left.me-2
              | Quay lại tài khoản

        form.col-md-4.summary(action="/AutoParts/order/edit" method="post")
          div
            h5
              b CHI TIẾT ĐƠN HÀNG
          hr
          input(type="hidden" name="orderId" value=order.orderId)
          .row.mb-3
            .col(style="padding-left: 0;") Số lượng: #{products.length}
            each item in products
              input(type="hidden" class="form-quantity" id=item.product.productId name=item.product.productId value=item.amount data-product-id=item.product.productId)

          .form-group
            label(for="shippingType") Loại vận chuyển
            select#shippingType(name="shippingType")
              option(value="" disabled) -- Chọn loại vận chuyển --
              option(value="20000" selected=order.shippingType === 'Normal') Vận chuyển thường - 20.000 ₫
              option(value="50000" selected=order.shippingType === 'Express') Vận chuyển nhanh - 50.000 ₫
              option(value="15000" selected=order.shippingType === 'Economy') Vận chuyển tiết kiệm - 15.000 ₫

          .form-group
            label(for="discountId") Mã khuyến mãi
            select#discountId(name="discountId")
              option(value="") -- Chọn mã khuyến mãi --
              each discount in discounts
                option(value=discount.discountId selected=order.discountId == discount.discountId) #{discount.discountDesc} - Giảm #{discount.discountAmount}% (Tối thiểu: #{discount.minimumAmount} ₫)

          .row.total-section
            .col TỔNG TIỀN
            input.col.text-right#total(name="totalCost" value=order.totalCost readonly)
            |  ₫

          .row.mt-3
            .col
              button.btn.order-btn.w-100 LƯU THAY ĐỔI

    script(type="text/javascript").
      document.addEventListener('DOMContentLoaded', function() {
        const successMessage = document.querySelector('.alert-success');
        const errorMessage = document.querySelector('.alert-danger');

        if (successMessage) {
          setTimeout(function() {
            successMessage.style.transition = 'opacity 0.5s';
            successMessage.style.opacity = '0';
            setTimeout(function() {
              successMessage.style.display = 'none';
            }, 500);
          }, 3000);
        }

        if (errorMessage) {
          setTimeout(function() {
            errorMessage.style.transition = 'opacity 0.5s';
            errorMessage.style.opacity = '0';
            setTimeout(function() {
              errorMessage.style.display = 'none';
            }, 500);
          }, 3000);
        }
      });

    script.
      let totalInput = document.getElementById("total");
      let priceInputs = document.querySelectorAll(".price");
      let quantityInputs = document.querySelectorAll(".quantity");
      let discountSelect = document.getElementById("discountId");
      let shippingSelect = document.getElementById("shippingType");

      const discounts = [
        !{discounts.map((discount, index) => `{ id: "${discount.discountId}", code: "${discount.discountDesc.replace(/"/g, '\\"')}", amount: ${discount.discountAmount}, minOrderValue: ${discount.minimumAmount} }${index < discounts.length - 1 ? ',' : ''}`).join('')}
      ];

      function updateDiscountOptions(totalCost) {
        const select = document.getElementById('discountId');
        select.innerHTML = '<option value="">-- Chọn mã khuyến mãi --</option>';
        discounts.forEach(discount => {
          const option = document.createElement('option');
          option.value = discount.id;
          option.text = discount.code + " - Giảm " + discount.amount + "% (Tối thiểu: " + discount.minOrderValue.toLocaleString('vi-VN') + " ₫)";
          if (discount.minOrderValue > totalCost) {
            option.disabled = true;
          }
          select.appendChild(option);
        });
      }

      function calculateTotalWithDiscount(baseTotal, discountId, shippingCost) {
        let total = baseTotal;
        if (discountId) {
          const selectedDiscount = discounts.find(discount => discount.id === discountId);
          if (selectedDiscount && selectedDiscount.minOrderValue <= baseTotal) {
            total = total * (1 - selectedDiscount.amount / 100);
          }
        }
        total += parseFloat(shippingCost || 0);
        return total;
      }

      function updateCost() {
        let baseTotal = 0;
        for (let i = 0; i < priceInputs.length; i++) {
          let price = parseFloat(priceInputs[i].value);
          let quantity = parseInt(quantityInputs[i].value);
          baseTotal += price * quantity;
        }
        const selectedDiscountId = discountSelect.value;
        const selectedShippingCost = shippingSelect.value;
        const finalTotal = calculateTotalWithDiscount(baseTotal, selectedDiscountId, selectedShippingCost);
        totalInput.value = finalTotal.toLocaleString('vi-VN');
        updateDiscountOptions(baseTotal);
      }

      discountSelect.addEventListener('change', function() {
        let baseTotal = 0;
        for (let i = 0; i < priceInputs.length; i++) {
          let price = parseFloat(priceInputs[i].value);
          let quantity = parseInt(quantityInputs[i].value);
          baseTotal += price * quantity;
        }
        const selectedDiscountId = this.value;
        const selectedShippingCost = shippingSelect.value;
        const finalTotal = calculateTotalWithDiscount(baseTotal, selectedDiscountId, selectedShippingCost);
        totalInput.value = finalTotal.toLocaleString('vi-VN');
      });

      shippingSelect.addEventListener('change', function() {
        let baseTotal = 0;
        for (let i = 0; i < priceInputs.length; i++) {
          let price = parseFloat(priceInputs[i].value);
          let quantity = parseInt(quantityInputs[i].value);
          baseTotal += price * quantity;
        }
        const selectedDiscountId = discountSelect.value;
        const selectedShippingCost = this.value;
        const finalTotal = calculateTotalWithDiscount(baseTotal, selectedDiscountId, selectedShippingCost);
        totalInput.value = finalTotal.toLocaleString('vi-VN');
      });

      function updateQuantity(input, delta) {
        let value = parseInt(input.value) + delta;
        if (value < 1) {
          showDialog(input);
        } else if (value > parseInt(input.max)) {
          return;
        } else {
          input.value = value;
          const productId = input.dataset.productId;
          const hiddenInput = document.querySelector(`.form-quantity[data-product-id="${productId}"]`);
          if (hiddenInput) {
            hiddenInput.value = value;
          }
          updateCost();
        }
      }

      function showDialog(input) {
        if (confirm('Bạn có muốn xóa sản phẩm này khỏi đơn hàng?')) {
          input.closest('.cart-item').querySelector('form').submit();
        }
      }

      updateCost();