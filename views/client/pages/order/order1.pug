doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title Giỏ hàng
    link(rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js")
    script(src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js")
    link(rel="stylesheet" href="/css/cart.css")
    link(rel="stylesheet" href="/css/base.css")

  body
    // Success message
    if successMessage
      .alert.alert-success.mt-3(role="alert" style="position: absolute; top: 0; left: 50%; right: 0; z-index: 9999;") #{successMessage}

    // Error message
    if errorMessage
      .alert.alert-danger.mt-3(role="alert" style="position: absolute; top: 0; left: 50%; right: 0; z-index: 9999;") #{errorMessage}

    .card
      .row
        .col-md-8.cart
          .title
            .row
              img.cart_logo-img(src="https://down-bs-vn.img.susercontent.com/vn-11134216-7ras8-m2ko7nkbfksm02_tn.webp" alt="home")
              .col.cart_title
                Ascent.h4
                b Giỏ hàng
              div
              .col.align-self-center.text-right.text-muted #{selectedProducts ? selectedProducts.length : 0} món
          .cart-list
            if selectedProducts && selectedProducts.length > 0
              each product in selectedProducts
                .row.border-bottom
                  .row.main.align-items-center
                    .col-2
                      img.img-fluid(src="https://html.themability.com/autoelite/assets/images/categories/1.png")
                    .col
                      .row.text-muted #{product.product.productId}
                      .row #{product.product.productName}
                      input.price(type="hidden" value=product.product.salePrice)
                      | #{product.product.salePrice} ₫
                    .col.updateQTY
                      button.btn-updateQTY(onclick="updateQuantity(this.nextElementSibling, -1)") -
                      input.input-updateQTY.quantity(type="number" data-product-id=product.product.productId value=product.amount min="1" max=product.product.stock)
                      button.btn-updateQTY(onclick="updateQuantity(this.previousElementSibling, 1)") +
                    .col
                      a(href=`/autopart/product/detailproduct.htm?productId=${product.product.productId}`) Xem chi tiết ->
          .back-to-shop
            a(href="/AutoParts")
              span ←
              span.text-muted Tiếp tục mua sắm
        form.col-md-4.summary(action="/AutoParts/order/create" method="post")
          div
            h5
              b HÓA ĐƠN
          hr
          .row
            .col(style="padding-left: 0;") Số lượng: #{selectedProducts ? selectedProducts.length : 0}
            each product in selectedProducts
              input(type="hidden" id=product.product.productId name=product.product.productId value=product.value)
          .row
            input(type="text" name="shipAddress" placeholder="Địa chỉ" required)
          div
            p Loại vận chuyển
            select(name="shippingType" id="shippingType")
              option(value="" readonly) -- Chọn loại vận chuyển --
              option(value="20000") Vận chuyển thường - 20.000 ₫
              option(value="50000") Vận chuyển nhanh - 50.000 ₫
              option(value="15000") Vận chuyển tiết kiệm - 15.000 ₫
            p Mã khuyến mãi
            select(name="discountId" id="discountId")
          .row(style="border-top: 1px solid rgba(0, 0, 0, .1); padding: 2vh 0;")
            .col TỔNG TIỀN
            input.col.text-right#total(name="totalCost" value="" readonly)
            |  ₫
          button.btn ĐẶT HÀNG

    script(type="text/javascript").
      document.addEventListener('DOMContentLoaded', function() {
        // Get success and error message elements
        const successMessage = document.querySelector('.alert-success');
        const errorMessage = document.querySelector('.alert-danger');
        
        // If success message exists, hide it after 3 seconds
        if (successMessage) {
          setTimeout(function() {
            successMessage.style.transition = 'opacity 0.5s';
            successMessage.style.opacity = '0';
            setTimeout(function() {
              successMessage.style.display = 'none';
            }, 500);
          }, 3000);
        }
        
        // If error message exists, hide it after 3 seconds
        if (errorMessage) {
          setTimeout(function() {
            errorMessage.style.transition = 'opacity 0.5s';
            errorMessage.style.opacity = '0';
            setTimeout(function() {
              errorMessage.style.display = 'none';
            }, 500);
          }, 3000);
        }
      });

    script.
      let totalInput = document.getElementById("total");
      let priceInputs = document.querySelectorAll(".price");
      let quantityInputs = document.querySelectorAll(".quantity");
      let discountSelect = document.getElementById("discountId");
      let shippingSelect = document.getElementById("shippingType");

      // Danh sách mã khuyến mãi từ server
      const discounts = [
        !{discounts.map((discount, index) => `{ id: "${discount.discountId}", code: "${discount.discountDesc.replace(/"/g, '\\"')}", amount: ${discount.discountAmount}, minOrderValue: ${discount.minimumAmount} }${index < discounts.length - 1 ? ',' : ''}`).join('')}
      ];

      console.log("Discounts: ", discounts);

      function updateDiscountOptions(totalCost) {
        const select = document.getElementById('discountId');
        select.innerHTML = '<option value="">-- Chọn mã khuyến mãi --</option>';
        discounts.forEach(discount => {
          const option = document.createElement('option');
          option.value = discount.id;
          option.text = discount.code + " - Giảm " + discount.amount + "% (Tối thiểu: " + discount.minOrderValue.toLocaleString('vi-VN') + " VNĐ)";
          if (discount.minOrderValue > totalCost) {
            option.disabled = true;
          }
          select.appendChild(option);
        });
      }

      function calculateTotalWithDiscount(baseTotal, discountId, shippingCost) {
        let total = baseTotal;
        if (discountId) {
          const selectedDiscount = discounts.find(discount => discount.id === discountId);
          if (selectedDiscount && selectedDiscount.minOrderValue <= baseTotal) {
            total = total * (1 - selectedDiscount.amount / 100);
          }
        }
        total += parseFloat(shippingCost || 0);
        return total;
      }

      function updateCost() {
        let baseTotal = 0;
        for (let i = 0; i < priceInputs.length; i++) {
          let price = parseFloat(priceInputs[i].value);
          let quantity = parseInt(quantityInputs[i].value);
          baseTotal += price * quantity;
        }
        const selectedDiscountId = discountSelect.value;
        const selectedShippingCost = shippingSelect.value;
        const finalTotal = calculateTotalWithDiscount(baseTotal, selectedDiscountId, selectedShippingCost);
        totalInput.value = finalTotal.toLocaleString('vi-VN');
        updateDiscountOptions(baseTotal);
      }

      // Lắng nghe sự kiện thay đổi mã giảm giá
      discountSelect.addEventListener('change', function() {
        let baseTotal = 0;
        for (let i = 0; i < priceInputs.length; i++) {
          let price = parseFloat(priceInputs[i].value);
          let quantity = parseInt(quantityInputs[i].value);
          baseTotal += price * quantity;
        }
        const selectedDiscountId = this.value;
        const selectedShippingCost = shippingSelect.value;
        const finalTotal = calculateTotalWithDiscount(baseTotal, selectedDiscountId, selectedShippingCost);
        totalInput.value = finalTotal.toLocaleString('vi-VN');
      });

      // Lắng nghe sự kiện thay đổi loại vận chuyển
      shippingSelect.addEventListener('change', function() {
        let baseTotal = 0;
        for (let i = 0; i < priceInputs.length; i++) {
          let price = parseFloat(priceInputs[i].value);
          let quantity = parseInt(quantityInputs[i].value);
          baseTotal += price * quantity;
        }
        const selectedDiscountId = discountSelect.value;
        const selectedShippingCost = this.value;
        const finalTotal = calculateTotalWithDiscount(baseTotal, selectedDiscountId, selectedShippingCost);
        totalInput.value = finalTotal.toLocaleString('vi-VN');
      });

      // Gọi hàm lần đầu khi trang tải
      updateCost();

      function updateQuantity(input, delta) {
        let value = parseInt(input.value) + delta;
        if (value < 1) {
          showDialog(input);
        } else if (value > input.max) {
          return;
        } else {
          input.value = value;
          updateCost();
        }
      }

      function showDialog(input) {
        const dialogOverlay = document.getElementById('dialog-overlay');
        dialogOverlay.style.visibility = 'visible';
        const confirmButton = document.getElementById('confirm-button');
        confirmButton.onclick = function() {
          input.closest('.cart-item').remove();
          dialogOverlay.style.visibility = 'hidden';
        };
        const cancelButton = document.getElementById('cancel-button');
        cancelButton.onclick = function() {
          dialogOverlay.style.visibility = 'hidden';
        };
      }