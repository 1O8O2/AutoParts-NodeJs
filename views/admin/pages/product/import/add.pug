extends ../../../layouts/default.pug
include ../../../mixins/alert.pug
include ../../../mixins/currency.pug

block main
    +alert-error(3000)
    +alert-success(3000)

    .container-fluid#container-wrapper
        #alertContainer
        .card.mb-4
            .card-header.py-3.d-flex.flex-row.align-items-center.justify-content-between
                h6.m-0.font-weight-bold.text-primary Nhập Hàng
            .card-body
                form(action=`${prefixAdmin}/product/import/add` method="POST" onsubmit="return validateForm()")
                    .row
                        // Cột 1: Thông tin phiếu nhập
                        .col-lg-6.order-info-column
                            .form-group
                                label(for="importId") Mã Phiếu Nhập 
                                    span.text-danger *
                                input.form-control(type="text" id="importId" name="importId" value=nextImportId readonly required)
                            .form-group
                                label(for="employeeName") Nhân Viên Nhập 
                                    span.text-danger *
                                input.form-control(type="text" id="employeeName" name="employeeName" value=user.fullName readonly required)
                            .form-group
                                label(for="importDate") Ngày Nhập 
                                    span.text-danger *
                                input.form-control(type="text" name="importDate" id="importDate" value=currentDate readonly required)
                            .form-group
                                label Tổng Chi Phí: 
                                    span#totalCostlbl 0₫
                                input.form-control(type="hidden" id="importCost" name="importCost" value="0")
                        // Cột 2: Chọn sản phẩm
                        .col-lg-6.order-info-column
                            .form-group
                                label(for="productId") Sản Phẩm 
                                    span.text-danger *
                                select.form-control(id="productId" onchange="addProduct(this)")
                                    option(value="" disabled selected) -- Chọn sản phẩm --
                                    if productList && productList.length > 0
                                        each product in productList
                                            option(value=product.productId 
                                                data-name=product.productName 
                                                data-price=product.costPrice
                                                data-stock=product.stock
                                            )= product.productName
                                    else
                                        option(value="" disabled) Không có sản phẩm nào
                            .form-group
                                label(for="amount") Số Lượng 
                                    span.text-danger *
                                input.form-control(type="number" id="amount" min="1" value="1")
                            .form-group
                                label(for="price") Giá Nhập 
                                    span.text-danger *
                                input.form-control(type="number" id="price" min="0")
                            button.btn.btn-primary.mb-3(type="button" onclick="addProductToList()") Thêm Sản Phẩm
                            .selected-products
                                h6 Danh Sách Sản Phẩm Đã Chọn
                                #selectedProductsList
                    .d-flex.justify-content-end.mt-3
                        button.btn.btn-primary(type="submit") Lưu Phiếu Nhập
                        a.btn.btn-secondary.ml-2(href=`${prefixAdmin}/product`) Quay Lại

    // Scroll to top
    a.scroll-to-top.rounded(href="#page-top")
        i.fas.fa-angle-up

    script.
        const messages = !{JSON.stringify(messages)};
        let selectedProducts = [];

        function showAlertClientSide(message, type = 'success', duration = 3000) {
            const existingAlerts = document.querySelectorAll('.message.info');
            existingAlerts.forEach(alert => alert.remove());
            // Determine alert class based on type
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';

            // Create alert HTML
            const alertHtml = `
                <div class="message info">
                    <div class="alert ${alertClass}" data-time="${duration}" show-alert role="alert">
                        ${message} <span close-alert>X</span>
                    </div>
                </div>
            `;

            // Append to a container (e.g., at the top of the form)
            const container = document.getElementById('alertContainer') || document.querySelector('.container-fluid');
            container.insertAdjacentHTML('afterbegin', alertHtml);

            // Handle auto-dismissal (if you have existing logic for this)
            const alertElement = container.querySelector('.alert[show-alert]');
            if (duration > 0) {
                setTimeout(() => {
                    alertElement.parentElement.remove();
                }, duration);
            }

            // Add click handler for manual close
            const closeButton = alertElement.querySelector('[close-alert]');
            closeButton.addEventListener('click', () => {
                alertElement.parentElement.remove();
            });
        }

        function formatCurrency(amount) {
            const number = Number(amount);
            
            if (isNaN(number)) {
                return "0₫";
            }

            let formattedNumber = number.toLocaleString('vi-VN', {
                minimumFractionDigits: 0, 
                maximumFractionDigits: 0 
            });
            
            formattedNumber = formattedNumber.replace(/\./g, ',');

            return formattedNumber + '₫';
        }
        
        function addProduct(select) {
            const selectedOption = select.options[select.selectedIndex];
            const priceInput = document.getElementById("price");
            priceInput.value = selectedOption.getAttribute("data-price");
        }

        function addProductToList() {
            const productId = document.getElementById("productId").value;
            const selectedOption = document.getElementById("productId").options[document.getElementById("productId").selectedIndex];
            const productName = selectedOption.text;
            const stock = selectedOption.getAttribute("data-stock");
            const amount = parseInt(document.getElementById("amount").value);
            const price = parseFloat(document.getElementById("price").value);

            if (!productId) {
                showAlertClientSide(messages.BLANK_INFORMATION, "error");
                return;
            }

            if (amount <= 0) {
                showAlertClientSide(messages.INVALID_PRODUCT_NUMBER, "error");
                return;
            }

            if (price <= 0) {
                showAlertClientSide(messages.INVALID_PRODUCT_COST_PRICE, "error");
                return;
            }

            const existingProduct = selectedProducts.find(p => p.productId === productId);
            if (existingProduct) {
                existingProduct.amount += amount;
                existingProduct.price = price; 
            } else {
                selectedProducts.push({ productId, productName, amount, price });
            }

            updateSelectedProductsList();
            updateTotalCost();
        }

        function updateSelectedProductsList() {
            const list = document.getElementById("selectedProductsList");
            list.innerHTML = "";
            const importId = document.getElementById("importId").value;

            selectedProducts.forEach((product, index) => {
                const item = document.createElement("div");
                item.className = "selected-item";
                item.innerHTML = '<div>' + 
                        '<div>' + product.productName + '</div>' + 
                        '<div>Số lượng: ' + product.amount + '</div>' + 
                        '<div> Giá: ' + formatCurrency(product.price) + '</div>' + 
                    '</div>' +
                    '<input type="hidden" name="importDetails[' + index + '].id.importId" value="' + importId + '">' + 
                    '<input type="hidden" name="importDetails[' + index + '].id.productId" value="' + product.productId + '">' +
                    '<input type="hidden" name="importDetails[' + index + '].amount" value="' + product.amount + '">' + 
                    '<input type="hidden" name="importDetails[' + index + '].price" value="' + product.price + '">' +
                    '<button type="button" class="btn btn-danger btn-sm" onclick="removeProduct(\'' + product.productId + '\')">Xóa</button>';
                list.appendChild(item);
            });
        }
        
        function removeProduct(productId) {
            selectedProducts = selectedProducts.filter(p => p.productId != productId);
            updateSelectedProductsList();
            updateTotalCost();
        }

        function updateTotalCost() {
            const totalCost = selectedProducts.reduce((sum, product) => sum + (product.amount * product.price), 0);
            $('#totalCostlbl').text(formatCurrency(totalCost));
            $('#importCost').val(totalCost);
        } 

        function validateForm() {
            if (selectedProducts.length === 0) {
                showAlertClientSide(messages.CHOOSE_AT_LEAST_A_PRODUCT, "error");
                return false;
            }
            return true;
        }